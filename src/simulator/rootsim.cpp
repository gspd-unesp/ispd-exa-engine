#include <engine.hpp>
#include <iostream>
#include <mutex>
#include <routing/table.hpp>
#include <service/machine.hpp>
#include <simulator/rootsim.hpp>

static ispd::sim::ROOTSimSimulator *g_Simulator;

/**
 * @brief The global routing table that is used by all
 *        services that are located in this physical process.
 *
 * @details
 *        Further, this global variable will be moved to a more
 *        general location.
 */
ENGINE_TEMPORARY RoutingTable *g_RoutingTable;

void ispd::sim::ROOTSimSimulator::simulate()
{
    g_Simulator = this;

    /* Update the ROOT-Sim's simulation configuration */
    m_Conf.lps        = m_ServiceInitializers.size();
    m_Conf.committed  = [](lp_id_t me, const void *snapshot) { return false; };
    m_Conf.dispatcher = [](lp_id_t     me,
                           simtime_t   now,
                           unsigned    event_type,
                           const void *content,
                           unsigned    size,
                           void       *s) {
        switch (event_type) {
        case LP_FINI: {
            // It checks if no service finalizer has been registered for the
            // current service. Unlikely the service initializer, there is no
            // strict requirement for all services to have a service finalizer.
            if (UNLIKELY(g_Simulator->getServicesFinalizers().find(me) ==
                         g_Simulator->getServicesFinalizers().end()))
                return;

            const std::function<void(Service *)> &serviceFinalizer =
                g_Simulator->getServicesFinalizers().at(me);
            serviceFinalizer((Service *)s);
            break;
        }
        case LP_INIT: {
            // It checks if no service has been registered with that id.
            if (UNLIKELY(g_Simulator->getServices().find(me) ==
                         g_Simulator->getServices().end()))
                die("Service with id %llu has not been found.", me);

            const std::function<Service *()> &serviceInitializer =
                g_Simulator->getServices().at(me);

            Service *service = serviceInitializer();

            // It checks if the service with the specified identifier has been
            // generated by a service initializer with another identifier. If
            // so, the program will be immediately aborted.
            if (UNLIKELY(service->getId() != me))
                die("Service with id %llu has been generated by the service "
                    "initializer with id %llu.\n",
                    service->getId(),
                    me);

            SetState(service);
            break;
        }
        case TASK_ARRIVAL: {
            /* This service may be a machine, link, master etc. */
            Service *service = (Service *)s;
            Event   *e       = (Event *)content;

            /* Calls the service's task arrival handler */
            service->onTaskArrival(now, e);
            break;
        }
        default:
            fprintf(stderr, "Unknown event type\n");
            abort();
        }
    };

    /* Initialize the ROOT-Sim */
    RootsimInit(&m_Conf);

    /* Run the ROOT-Sim */
    RootsimRun();
}
